//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestManagerClient.WcfServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Worker", Namespace="http://schemas.datacontract.org/2004/07/DataAccessLayer.Entities")]
    [System.SerializableAttribute()]
    public partial class Worker : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateOfBirthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DepartmentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SexIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateOfBirth {
            get {
                return this.DateOfBirthField;
            }
            set {
                if ((this.DateOfBirthField.Equals(value) != true)) {
                    this.DateOfBirthField = value;
                    this.RaisePropertyChanged("DateOfBirth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DepartmentId {
            get {
                return this.DepartmentIdField;
            }
            set {
                if ((this.DepartmentIdField.Equals(value) != true)) {
                    this.DepartmentIdField = value;
                    this.RaisePropertyChanged("DepartmentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneNumber {
            get {
                return this.PhoneNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneNumberField, value) != true)) {
                    this.PhoneNumberField = value;
                    this.RaisePropertyChanged("PhoneNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SexId {
            get {
                return this.SexIdField;
            }
            set {
                if ((this.SexIdField.Equals(value) != true)) {
                    this.SexIdField = value;
                    this.RaisePropertyChanged("SexId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Department", Namespace="http://schemas.datacontract.org/2004/07/DataAccessLayer.Entities")]
    [System.SerializableAttribute()]
    public partial class Department : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameDepartmentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ParentIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NameDepartment {
            get {
                return this.NameDepartmentField;
            }
            set {
                if ((object.ReferenceEquals(this.NameDepartmentField, value) != true)) {
                    this.NameDepartmentField = value;
                    this.RaisePropertyChanged("NameDepartment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ParentId {
            get {
                return this.ParentIdField;
            }
            set {
                if ((this.ParentIdField.Equals(value) != true)) {
                    this.ParentIdField = value;
                    this.RaisePropertyChanged("ParentId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WcfServiceReference.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddWorker", ReplyAction="http://tempuri.org/IService/AddWorkerResponse")]
        void AddWorker(TestManagerClient.WcfServiceReference.Worker worker);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddWorker", ReplyAction="http://tempuri.org/IService/AddWorkerResponse")]
        System.Threading.Tasks.Task AddWorkerAsync(TestManagerClient.WcfServiceReference.Worker worker);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EditWorker", ReplyAction="http://tempuri.org/IService/EditWorkerResponse")]
        void EditWorker(TestManagerClient.WcfServiceReference.Worker worker);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EditWorker", ReplyAction="http://tempuri.org/IService/EditWorkerResponse")]
        System.Threading.Tasks.Task EditWorkerAsync(TestManagerClient.WcfServiceReference.Worker worker);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteWorker", ReplyAction="http://tempuri.org/IService/DeleteWorkerResponse")]
        void DeleteWorker(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteWorker", ReplyAction="http://tempuri.org/IService/DeleteWorkerResponse")]
        System.Threading.Tasks.Task DeleteWorkerAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddDepartment", ReplyAction="http://tempuri.org/IService/AddDepartmentResponse")]
        TestManagerClient.WcfServiceReference.Department AddDepartment(TestManagerClient.WcfServiceReference.Department department);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddDepartment", ReplyAction="http://tempuri.org/IService/AddDepartmentResponse")]
        System.Threading.Tasks.Task<TestManagerClient.WcfServiceReference.Department> AddDepartmentAsync(TestManagerClient.WcfServiceReference.Department department);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EditDepartment", ReplyAction="http://tempuri.org/IService/EditDepartmentResponse")]
        void EditDepartment(TestManagerClient.WcfServiceReference.Department department);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EditDepartment", ReplyAction="http://tempuri.org/IService/EditDepartmentResponse")]
        System.Threading.Tasks.Task EditDepartmentAsync(TestManagerClient.WcfServiceReference.Department department);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteDepartment", ReplyAction="http://tempuri.org/IService/DeleteDepartmentResponse")]
        void DeleteDepartment(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteDepartment", ReplyAction="http://tempuri.org/IService/DeleteDepartmentResponse")]
        System.Threading.Tasks.Task DeleteDepartmentAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllWorkers", ReplyAction="http://tempuri.org/IService/GetAllWorkersResponse")]
        TestManagerClient.WcfServiceReference.Worker[] GetAllWorkers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllWorkers", ReplyAction="http://tempuri.org/IService/GetAllWorkersResponse")]
        System.Threading.Tasks.Task<TestManagerClient.WcfServiceReference.Worker[]> GetAllWorkersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetWorker", ReplyAction="http://tempuri.org/IService/GetWorkerResponse")]
        TestManagerClient.WcfServiceReference.Worker GetWorker(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetWorker", ReplyAction="http://tempuri.org/IService/GetWorkerResponse")]
        System.Threading.Tasks.Task<TestManagerClient.WcfServiceReference.Worker> GetWorkerAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllDepartments", ReplyAction="http://tempuri.org/IService/GetAllDepartmentsResponse")]
        TestManagerClient.WcfServiceReference.Department[] GetAllDepartments();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllDepartments", ReplyAction="http://tempuri.org/IService/GetAllDepartmentsResponse")]
        System.Threading.Tasks.Task<TestManagerClient.WcfServiceReference.Department[]> GetAllDepartmentsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetDepartment", ReplyAction="http://tempuri.org/IService/GetDepartmentResponse")]
        TestManagerClient.WcfServiceReference.Department GetDepartment(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetDepartment", ReplyAction="http://tempuri.org/IService/GetDepartmentResponse")]
        System.Threading.Tasks.Task<TestManagerClient.WcfServiceReference.Department> GetDepartmentAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : TestManagerClient.WcfServiceReference.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<TestManagerClient.WcfServiceReference.IService>, TestManagerClient.WcfServiceReference.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddWorker(TestManagerClient.WcfServiceReference.Worker worker) {
            base.Channel.AddWorker(worker);
        }
        
        public System.Threading.Tasks.Task AddWorkerAsync(TestManagerClient.WcfServiceReference.Worker worker) {
            return base.Channel.AddWorkerAsync(worker);
        }
        
        public void EditWorker(TestManagerClient.WcfServiceReference.Worker worker) {
            base.Channel.EditWorker(worker);
        }
        
        public System.Threading.Tasks.Task EditWorkerAsync(TestManagerClient.WcfServiceReference.Worker worker) {
            return base.Channel.EditWorkerAsync(worker);
        }
        
        public void DeleteWorker(int id) {
            base.Channel.DeleteWorker(id);
        }
        
        public System.Threading.Tasks.Task DeleteWorkerAsync(int id) {
            return base.Channel.DeleteWorkerAsync(id);
        }
        
        public TestManagerClient.WcfServiceReference.Department AddDepartment(TestManagerClient.WcfServiceReference.Department department) {
            return base.Channel.AddDepartment(department);
        }
        
        public System.Threading.Tasks.Task<TestManagerClient.WcfServiceReference.Department> AddDepartmentAsync(TestManagerClient.WcfServiceReference.Department department) {
            return base.Channel.AddDepartmentAsync(department);
        }
        
        public void EditDepartment(TestManagerClient.WcfServiceReference.Department department) {
            base.Channel.EditDepartment(department);
        }
        
        public System.Threading.Tasks.Task EditDepartmentAsync(TestManagerClient.WcfServiceReference.Department department) {
            return base.Channel.EditDepartmentAsync(department);
        }
        
        public void DeleteDepartment(int id) {
            base.Channel.DeleteDepartment(id);
        }
        
        public System.Threading.Tasks.Task DeleteDepartmentAsync(int id) {
            return base.Channel.DeleteDepartmentAsync(id);
        }
        
        public TestManagerClient.WcfServiceReference.Worker[] GetAllWorkers() {
            return base.Channel.GetAllWorkers();
        }
        
        public System.Threading.Tasks.Task<TestManagerClient.WcfServiceReference.Worker[]> GetAllWorkersAsync() {
            return base.Channel.GetAllWorkersAsync();
        }
        
        public TestManagerClient.WcfServiceReference.Worker GetWorker(int id) {
            return base.Channel.GetWorker(id);
        }
        
        public System.Threading.Tasks.Task<TestManagerClient.WcfServiceReference.Worker> GetWorkerAsync(int id) {
            return base.Channel.GetWorkerAsync(id);
        }
        
        public TestManagerClient.WcfServiceReference.Department[] GetAllDepartments() {
            return base.Channel.GetAllDepartments();
        }
        
        public System.Threading.Tasks.Task<TestManagerClient.WcfServiceReference.Department[]> GetAllDepartmentsAsync() {
            return base.Channel.GetAllDepartmentsAsync();
        }
        
        public TestManagerClient.WcfServiceReference.Department GetDepartment(int id) {
            return base.Channel.GetDepartment(id);
        }
        
        public System.Threading.Tasks.Task<TestManagerClient.WcfServiceReference.Department> GetDepartmentAsync(int id) {
            return base.Channel.GetDepartmentAsync(id);
        }
    }
}
